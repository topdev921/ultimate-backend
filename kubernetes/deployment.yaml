apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-secret: regcred
      kompose.service.expose: "true"
      kompose.service.type: loadbalancer
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: eventstore
    name: eventstore
  spec:
    ports:
    - name: "2113"
      port: 2113
      targetPort: 2113
    - name: "1113"
      port: 1113
      targetPort: 1113
    selector:
      io.kompose.service: eventstore
    type: LoadBalancer
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.expose: "true"
      kompose.service.type: loadbalancer
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: gateway-admin
    name: gateway-admin
  spec:
    ports:
    - name: "4000"
      port: 4000
      targetPort: 4000
    selector:
      io.kompose.service: gateway-admin
    type: LoadBalancer
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.expose: "true"
      kompose.service.type: loadbalancer
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: gateway-client
    name: gateway-client
  spec:
    ports:
    - name: "5000"
      port: 5000
      targetPort: 5000
    selector:
      io.kompose.service: gateway-client
    type: LoadBalancer
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.type: clusterip
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: services-auth
    name: services-auth
  spec:
    ports:
    - name: "9900"
      port: 9900
      targetPort: 9900
    selector:
      io.kompose.service: services-auth
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.type: clusterip
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: services-notification
    name: services-notification
  spec:
    ports:
    - name: "9400"
      port: 9400
      targetPort: 9400
    selector:
      io.kompose.service: services-notification
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.type: clusterip
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: services-payment
    name: services-payment
  spec:
    ports:
    - name: "9300"
      port: 9300
      targetPort: 9300
    selector:
      io.kompose.service: services-payment
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.type: clusterip
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: services-project
    name: services-project
  spec:
    ports:
    - name: "9100"
      port: 9100
      targetPort: 9100
    selector:
      io.kompose.service: services-project
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.type: clusterip
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: services-tenant
    name: services-tenant
  spec:
    ports:
    - name: "9200"
      port: 9200
      targetPort: 9200
    selector:
      io.kompose.service: services-tenant
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.type: clusterip
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: services-user
    name: services-user
  spec:
    ports:
    - name: "9000"
      port: 9000
      targetPort: 9000
    selector:
      io.kompose.service: services-user
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-secret: regcred
      kompose.service.expose: "true"
      kompose.service.type: loadbalancer
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: eventstore
    name: eventstore
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: eventstore
      spec:
        containers:
        - image: eventstore/eventstore
          name: eventstore-node
          ports:
          - containerPort: 2113
          - containerPort: 1113
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: eventstore
    name: eventstore
  spec:
    rules:
    - http:
        paths:
        - backend:
            serviceName: eventstore
            servicePort: 2113
  status:
    loadBalancer: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.expose: "true"
      kompose.service.type: loadbalancer
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: gateway-admin
    name: gateway-admin
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: gateway-admin
      spec:
        containers:
        - env:
          - name: AUTH_ENDPOINT
            value: http://services-auth:9900/graphql
          - name: AUTH_PATH
            value: auth
          - name: PORT
            value: "4000"
          - name: PROJECT_ENDPOINT
            value: http://services-project:9100/graphql
          - name: PROJECT_PATH
            value: project
          - name: USER_ENDPOINT
            value: http://services-user:9000/graphql
          - name: USER_PATH
            value: user
          image: ultimatebackend/gateway-admin:development
          name: gateway-admin
          ports:
          - containerPort: 4000
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: gateway-admin
    name: gateway-admin
  spec:
    rules:
    - http:
        paths:
        - backend:
            serviceName: gateway-admin
            servicePort: 4000
  status:
    loadBalancer: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.expose: "true"
      kompose.service.type: loadbalancer
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: gateway-client
    name: gateway-client
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: gateway-client
      spec:
        containers:
        - env:
          - name: AUTH_ENDPOINT
            value: http://services-auth:9900/graphql
          - name: PAYMENT_ENDPOINT
            value: http://services-project:9300/graphql
          - name: PORT
            value: "5000"
          - name: PROJECT_ENDPOINT
            value: http://services-project:9100/graphql
          - name: TENANT_ENDPOINT
            value: http://services-auth:9200/graphql
          - name: USER_ENDPOINT
            value: http://services-user:9000/graphql
          image: ultimatebackend/gateway-client:development
          name: gateway-client
          ports:
          - containerPort: 5000
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: gateway-client
    name: gateway-client
  spec:
    rules:
    - http:
        paths:
        - backend:
            serviceName: gateway-client
            servicePort: 5000
  status:
    loadBalancer: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.type: clusterip
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: services-auth
    name: services-auth
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: services-auth
      spec:
        containers:
        - env:
          - name: ES_HTTP_PORT
            value: "2113"
          - name: ES_HTTP_PROTOCOL
            value: http
          - name: ES_POOL_MAX
          - name: ES_POOL_MIN
          - name: ES_STREAM_PROTOCOL
            value: http
          - name: ES_TCP_HOSTNAME
            value: eventstore
          - name: ES_TCP_PASSWORD
            value: changeit
          - name: ES_TCP_PORT
            value: "1113"
          - name: ES_TCP_PROTOCOL
            value: tcp
          - name: ES_TCP_USERNAME
            value: admin
          - name: MONGODB_DB_NAME
            value: service-auth
          - name: MONGODB_DB_OPTIONS
            value: ?retryWrites=true&w=majority
          - name: MONGO_DB_SERVER_URI
            value: mongodb+srv://admin:adminadmin@dfour-prod-cluster-gzfix.mongodb.net/
          - name: PORT
            value: "9900"
          image: ultimatebackend/service-auth:development
          livenessProbe:
            exec:
              command:
              - curl --fail -s http://localhost:9900/ || exit 1
            failureThreshold: 3
            periodSeconds: 90
            timeoutSeconds: 10
          name: services-auth
          ports:
          - containerPort: 9900
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.type: clusterip
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: services-notification
    name: services-notification
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: services-notification
      spec:
        containers:
        - env:
          - name: AUTH_SERVICE
            value: http://services-auth:9900/graphql
          - name: ES_HTTP_PORT
            value: "2113"
          - name: ES_HTTP_PROTOCOL
            value: http
          - name: ES_POOL_MAX
          - name: ES_POOL_MIN
          - name: ES_STREAM_PROTOCOL
            value: http
          - name: ES_TCP_HOSTNAME
            value: eventstore
          - name: ES_TCP_PASSWORD
            value: changeit
          - name: ES_TCP_PORT
            value: "1113"
          - name: ES_TCP_PROTOCOL
            value: tcp
          - name: ES_TCP_USERNAME
            value: admin
          - name: MONGODB_DB_NAME
            value: service-notification
          - name: MONGODB_DB_OPTIONS
            value: ?retryWrites=true&w=majority
          - name: MONGO_DB_SERVER_URI
            value: mongodb+srv://admin:adminadmin@dfour-prod-cluster-gzfix.mongodb.net/
          - name: PORT
            value: "9400"
          image: ultimatebackend/service-notification:development
          livenessProbe:
            exec:
              command:
              - curl --fail -s http://localhost:9400/ || exit 1
            failureThreshold: 3
            periodSeconds: 90
            timeoutSeconds: 10
          name: services-notification
          ports:
          - containerPort: 9400
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.type: clusterip
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: services-payment
    name: services-payment
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: services-payment
      spec:
        containers:
        - env:
          - name: AUTH_SERVICE
            value: http://services-auth:9900/graphql
          - name: ES_HTTP_PORT
            value: "2113"
          - name: ES_HTTP_PROTOCOL
            value: http
          - name: ES_POOL_MAX
          - name: ES_POOL_MIN
          - name: ES_STREAM_PROTOCOL
            value: http
          - name: ES_TCP_HOSTNAME
            value: eventstore
          - name: ES_TCP_PASSWORD
            value: changeit
          - name: ES_TCP_PORT
            value: "1113"
          - name: ES_TCP_PROTOCOL
            value: tcp
          - name: ES_TCP_USERNAME
            value: admin
          - name: MONGODB_DB_NAME
            value: service-payment
          - name: MONGODB_DB_OPTIONS
            value: ?retryWrites=true&w=majority
          - name: MONGO_DB_SERVER_URI
            value: mongodb+srv://admin:adminadmin@dfour-prod-cluster-gzfix.mongodb.net/
          - name: PORT
            value: "9300"
          image: ultimatebackend/service-payment:development
          livenessProbe:
            exec:
              command:
              - curl --fail -s http://localhost:9300/ || exit 1
            failureThreshold: 3
            periodSeconds: 90
            timeoutSeconds: 10
          name: services-payment
          ports:
          - containerPort: 9300
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.type: clusterip
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: services-project
    name: services-project
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: services-project
      spec:
        containers:
        - env:
          - name: AUTH_SERVICE
            value: http://services-auth:9900/graphql
          - name: ES_HTTP_PORT
            value: "2113"
          - name: ES_HTTP_PROTOCOL
            value: http
          - name: ES_POOL_MAX
          - name: ES_POOL_MIN
          - name: ES_STREAM_PROTOCOL
            value: http
          - name: ES_TCP_HOSTNAME
            value: eventstore
          - name: ES_TCP_PASSWORD
            value: changeit
          - name: ES_TCP_PORT
            value: "1113"
          - name: ES_TCP_PROTOCOL
            value: tcp
          - name: ES_TCP_USERNAME
            value: admin
          - name: MONGODB_DB_NAME
            value: service-project
          - name: MONGODB_DB_OPTIONS
            value: ?retryWrites=true&w=majority
          - name: MONGO_DB_SERVER_URI
            value: mongodb+srv://admin:adminadmin@dfour-prod-cluster-gzfix.mongodb.net/
          - name: PORT
            value: "9100"
          image: ultimatebackend/service-project:development
          livenessProbe:
            exec:
              command:
              - curl --fail -s http://localhost:9100/ || exit 1
            failureThreshold: 3
            periodSeconds: 90
            timeoutSeconds: 10
          name: services-project
          ports:
          - containerPort: 9100
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.type: clusterip
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: services-tenant
    name: services-tenant
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: services-tenant
      spec:
        containers:
        - env:
          - name: AUTH_SERVICE
            value: http://services-auth:9900/graphql
          - name: ES_HTTP_PORT
            value: "2113"
          - name: ES_HTTP_PROTOCOL
            value: http
          - name: ES_POOL_MAX
          - name: ES_POOL_MIN
          - name: ES_STREAM_PROTOCOL
            value: http
          - name: ES_TCP_HOSTNAME
            value: eventstore
          - name: ES_TCP_PASSWORD
            value: changeit
          - name: ES_TCP_PORT
            value: "1113"
          - name: ES_TCP_PROTOCOL
            value: tcp
          - name: ES_TCP_USERNAME
            value: admin
          - name: MONGODB_DB_NAME
            value: service-tenant
          - name: MONGODB_DB_OPTIONS
            value: ?retryWrites=true&w=majority
          - name: MONGO_DB_SERVER_URI
            value: mongodb+srv://admin:adminadmin@dfour-prod-cluster-gzfix.mongodb.net/
          - name: PORT
            value: "9200"
          image: ultimatebackend/service-tenant:development
          livenessProbe:
            exec:
              command:
              - curl --fail -s http://localhost:9200/ || exit 1
            failureThreshold: 3
            periodSeconds: 90
            timeoutSeconds: 10
          name: services-tenant
          ports:
          - containerPort: 9200
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f docker/development/docker-compose.yml convert -o kubernetes/deployment.yaml
      kompose.image-pull-policy: Always
      kompose.image-pull-secret: regcred
      kompose.service.type: clusterip
      kompose.version: 1.17.0 (a74acad)
    creationTimestamp: null
    labels:
      io.kompose.service: services-user
    name: services-user
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: services-user
      spec:
        containers:
        - env:
          - name: AUTH_SERVICE
            value: http://services-auth:9900/graphql
          - name: ES_HTTP_PORT
            value: "2113"
          - name: ES_HTTP_PROTOCOL
            value: http
          - name: ES_POOL_MAX
          - name: ES_POOL_MIN
          - name: ES_STREAM_PROTOCOL
            value: http
          - name: ES_TCP_HOSTNAME
            value: eventstore
          - name: ES_TCP_PASSWORD
            value: changeit
          - name: ES_TCP_PORT
            value: "1113"
          - name: ES_TCP_PROTOCOL
            value: tcp
          - name: ES_TCP_USERNAME
            value: admin
          - name: MONGODB_DB_NAME
            value: service-user
          - name: MONGODB_DB_OPTIONS
            value: ?retryWrites=true&w=majority
          - name: MONGO_DB_SERVER_URI
            value: mongodb+srv://admin:adminadmin@dfour-prod-cluster-gzfix.mongodb.net/
          - name: PORT
            value: "9000"
          image: ultimatebackend/service-user:development
          livenessProbe:
            exec:
              command:
              - curl --fail -s http://localhost:9000/ || exit 1
            failureThreshold: 3
            periodSeconds: 90
            timeoutSeconds: 10
          name: services-user
          ports:
          - containerPort: 9000
          resources: {}
        restartPolicy: Always
  status: {}
kind: List
metadata: {}

