#import * from "./shared.graphql";

extend type User @key(fields: "id") {
    id: ID! @external

    tenants(input: Paginate): [Tenant!]
}

type Tenant implements Node @key(fields: "id") {
    """Type ID (Unique)"""
    id: ID!

    """Type creation timestamp (The timestamp the data was created)"""
    createdAt: DateTime!

    """Type update timestamp (The timestamp the data was created)"""
    updatedAt: DateTime!

    """Tenant name"""
    name: String!

    """Tenant path name"""
    normalizeName: String!

    members: TenantMember!
}

type TenantMember implements Node @key(fields: "id") {
    """Type ID (Unique)"""
    id: ID!

    """Member email"""
    email: String!

    """Member role"""
    role: AppRole!

    """Member role"""
    status: InvitationStatus!

    """Type creation timestamp (The timestamp the data was created)"""
    createdAt: DateTime!

    """Type update timestamp (The timestamp the data was created)"""
    updatedAt: DateTime!

    tenant: Tenant!
}

type TenantAccessToken {

    """Access secret"""
    key: String!

    """Access secret"""
    secert: AppRole!

    """Token active, there can only be one active token at any time"""
    active: Boolean!

    """Token created datetime"""
    createdAt: DateTime!
}

extend type Query {
    tenant(id: ID!): Tenant!
    tenants(paginate: Paginate): [Tenant!]

    tenantMember(id: ID!): TenantMember!
    tenantMembers(paginate: Paginate): [TenantMember!]
}

extend type Mutation {
    createTenant(input: CreateTenantInput!): Tenant!
    updateTenant(
        id: ID!,
        plan: ID,
        tenant: UpdateTenantInput,
    ): Tenant!
    removeTenant(id: ID!):  Tenant!
    generateAccessToken: Tenant
    retireAccessToken(key: String!, secret: String): Tenant

    inviteTenantMember(input: InviteTenantMemberInput!): TenantMember!
    updateTenantMember(input: UpdateTenantMemberInput!): TenantMember!
    removeTenantMember(id: ID!): TenantMember!
}

input CreateTenantInput {
    name: String!
}

input InviteTenantMemberInput {
    email: String
    role: AppRole
}

input UpdateTenantMemberInput {
    email: String
    role: AppRole
}

input UpdateTenantInput {
    name: String!
}
