
extend type User @key(fields: "id") {
    id: ID! @external
    auth: AuthPayload
}

type AuthPayload @key(fields: "id") {
    id: ID!
    sessionId: String
    tokens: Tokens
}

type BooleanPayload {
    success: Boolean!
}

extend type Mutation {

    login(input: LoginInput!): AuthPayload!
    logout: BooleanPayload!
    register(input: RegisterInput!):  AuthPayload!

    refreshTokens(accessToken: String!, refreshToken: String!): AuthPayload

    verifyEmail(token: String!): BooleanPayload
    resetPassword(token: String!, newPassword: String!): AuthPayload

    sendVerificationEmail(email: String!): BooleanPayload
    sendResetPasswordEmail(email: String!): BooleanPayload

    changePassword(oldPassword: String!, newPassword: String!, newPasswordComfirm: String!): BooleanPayload
}

input LoginInput {
    service: ServiceTypes!
    params: LoginParamsInput!
}

input LoginParamsInput {
    """ Access token for social (Service: Twitter, Github, Email) """
    accessToken: String
    """ Access token for social (Service: Twitter, Github, Email) """
    accessTokenSecret: String

    """ User password (Service: Password) """
    password: String
    """ Primary email of the user (Service: Password) """
    email: String
}

input RegisterInput {
    firstname: String!
    lastname: String!
    email: String!
    password: String!
}

type Tokens {
    refreshToken: String
    accessToken: String
}

enum ServiceTypes {
    Password,
    Facebook,
    Github,
    Google,
}
