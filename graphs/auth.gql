# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

directive @key(fields: String!) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

type AuthPayload {
  id: ID!
  sessionId: String!
  tokens: Tokens!
}

type BooleanPayload {
  success: Boolean!
}

input LoginInput {
  service: ServiceTypes!
  params: LoginParamsInput!
}

input LoginParamsInput {
  """Access token for social (Service: Twitter, Github, Email)"""
  accessToken: String

  """Access token for social (Service: Twitter, Github, Email)"""
  accessTokenSecret: String

  """User password (Service: Password)"""
  password: String

  """Primary email of the user (Service: Password)"""
  email: String
}

type Mutation {
  login(input: LoginInput!): AuthPayload!
  register(input: RegisterInput!): BooleanPayload!
  sendResetPasswordEmail(email: String!): BooleanPayload!
  sendVerificationEmail(email: String!): BooleanPayload!
  changePassword(newPasswordConfirm: String!, newPassword: String!, oldPassword: String!): BooleanPayload!
  refreshTokens(refreshToken: String!, accessToken: String!): AuthPayload!
  verifyEmail(email: String!, token: Float!): BooleanPayload!
  logout: BooleanPayload!
}

type Query

input RegisterInput {
  firstname: String!
  lastname: String!
  email: String!
  password: String!
}

"""Authentication service types"""
enum ServiceTypes {
  Password
  Facebook
  Github
  Google
}

type Tokens {
  refreshToken: String!
  accessToken: String!
}
