# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @key(fields: String!) on INTERFACE | OBJECT

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

type Address {
  city: String
  country: String
  id: ID
  line: String
  line2: String
  postalCode: String
  state: String
}

input AddressInput {
  city: String
  country: String
  line: String
  line2: String
  postalCode: String
  state: String
  zip: String
}

type Billing {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

type Card {
  address: Address
  brand: String
  currency: String
  cvc: String!
  expMonth: Int!
  expYear: Int!
  id: ID
  lastFourDigit: String
  name: String!
  number: String
}

input CreateUpdateCardInput {
  address: AddressInput!
  currency: String
  cvc: String!
  expMonth: Int!
  expYear: Int!
  name: String!
  number: String!
}

input CreateUpdatePlanInput {
  active: Boolean!
  description: String
  features: [FeatureInput!]
  free: Boolean
  name: String!
  prices: [PriceInput!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DeleteCardInput {
  id: ID!
}

input DeletePlanInput {
  id: ID!
}

type Feature {
  active: Boolean
  description: String
  full: Boolean
  max: Int
  min: Int
  name: String!
  normalizedName: String
}

input FeatureInput {
  active: Boolean!
  description: String
  full: Boolean!
  max: Int
  min: Int
  name: String!
  normalizedName: String!
}

type Mutation {
  card(create: CreateUpdateCardInput, delete: DeleteCardInput, update: UpdateCardInput): Card!
  plan(create: CreateUpdatePlanInput, delete: DeletePlanInput, update: UpdatePlanInput): Plan!
}

type Plan {
  active: Boolean!
  createdAt: DateTime!
  features: [Feature!]
  free: Boolean
  id: ID!
  name: String!
  normalizedName: String!
  prices: [Price!]
  updatedAt: DateTime!
}

input PlanFilterInput {
  active: Boolean
  ids: [String!]
  shippable: Boolean
}

"""Pricing interval enum"""
enum PlanPriceInterval {
  DAY
  MONTH
  WEEK
  YEAR
}

type Price {
  currency: String
  id: String
  name: String
  price: Float
  trialDays: Int
}

input PriceInput {
  currency: String!
  id: String
  interval: PlanPriceInterval!

  """
  The interval cunt for the field interval, eg. for interval MONTH, you can pass 3
  """
  intervalCount: Int
  nickname: String!
  price: Float!
  trialDays: Int
}

type Query {
  billing: Billing!
  card(id: String!): Card!
  cards: [Card!]!
  plan(id: String!): Plan!
  plans(where: PlanFilterInput!): [Plan!]!
}

input UpdateCardInput {
  data: ID!
  id: ID!
}

input UpdatePlanInput {
  data: CreateUpdatePlanInput!
  id: ID!
}
